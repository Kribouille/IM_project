/*
 * generated by Xtext 2.10.0
 */
package org.xtext.twitter.twt.generator

import java.io.BufferedWriter
import java.io.FileWriter
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.emf.ecore.util.EcoreUtil
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import org.eclipse.xtext.resource.XtextResourceSet
import org.xtext.twitter.twt.TwitterRESTAPIStandaloneSetup
import twitterRESTAPI.And
import twitterRESTAPI.Date
import twitterRESTAPI.Deck
import twitterRESTAPI.Equals
import twitterRESTAPI.ExprSimple
import twitterRESTAPI.Expression
import twitterRESTAPI.Hashtag
import twitterRESTAPI.LessThan
import twitterRESTAPI.Not
import twitterRESTAPI.Operation
import twitterRESTAPI.Or
import twitterRESTAPI.Place
import twitterRESTAPI.Type
import twitterRESTAPI.UpperThan
import twitterRESTAPI.User
import twitterRESTAPI.WebPage

/**
 * Generates code from your model files on save.
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class TwitterRESTAPIGenerator extends AbstractGenerator {

	/**
	 * External call to generate
	 */
	def public void generate(String in, String outputFile) {
		val injector = new TwitterRESTAPIStandaloneSetup().createInjectorAndDoEMFRegistration();
		val resourceSet = injector.getInstance(XtextResourceSet);		
		val xtextResource = resourceSet.getResource(URI.createURI("C:\\tmp\\irn.twt"), true);
		EcoreUtil.resolveAll(xtextResource);
		
		var out = outputFile
		if(out.equals(""))
			out = in + "gen.json"
			
		try {
  			val fstream = new FileWriter(out)
  			val buff = new BufferedWriter(fstream)
  			for(p: xtextResource.allContents.toIterable.filter(WebPage))
				buff.write(p.compile.toString)
  			buff.close()
  		}catch (Exception e){
  			println("Can't write " + out + " - Error: " + e.getMessage())
  		}
	}

	/**
	 * Internal call for XText
	 */
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for(w: resource.allContents.toIterable.filter(WebPage))
					fsa.generateFile("generatedCode.json", w.compile)
	}

	def compile(WebPage wp) '''
		{
			"decks" : [
			«for (Deck d : wp.deck) {d.compile}»
			]
		}
	'''



	def compile(Deck d) '''
	{
	"name" : «d.name» ,
	"expression" : «d.expression.compile»
	}
	'''

	/***********************************
	 * EXPRESSIONS
	 ***********************************/
	def compile(Expression e) '''
	{
	«switch(e) {
		case ExprSimple : (e as ExprSimple).compile
		case And: (e as And).compile
		case Or: (e as Or).compile
		case Not: (e as Not).compile
		default: e.class.name
		}»
	}
	'''

	def compileExprS(ExprSimple es) '''
		"type" : «es.type.compile»
		"op" : «es.operation.compile»
		"value" : «es.value»
	'''

	def compile(And a) '''
		"class" : "And"
		"exp1" : {
			«a.exp1.compile»
			}
		"exp2" : {
			«a.exp2.compile»
			}
	'''

	def compile(Or o) '''
		"class" : "Or"
			"exp1" : {
				«o.exp1.compile»
				}
			"exp2" : {
				«o.exp2.compile»
				}
	'''

	def compile(Not n) '''
		"class" : "Not"
			"exp" : {
				«n.exp.compile»
				}
	'''

	/***********************************
	 * TYPES
	 ***********************************/
	def compile(Type t) '''
	«switch(t) {
		case User : (t as User).compile
		case Hashtag : (t as Hashtag).compile
		case Date : (t as Date).compile
		case Place : (t as Place).compile
		default : t.class.name
	}»
	'''

	def compile(User u) '''
	"User"
	'''

	def compile(Hashtag h) '''
	"Hashtag"
	'''

	def compile(Date d) '''
	"Date"
	'''

	def compile(Place p) '''
	"Place"
	'''

	/***********************************
	 * OPERATIONS
	 ***********************************/
	 def compile(Operation o)'''
	 «switch(o) {
		case Equals : (o as Equals).compile
		case LessThan : (o as LessThan).compile
		case UpperThan : (o as UpperThan).compile
		default : o.class.name
	}»
	 '''

	 def compile(Equals e) '''
	 "Equals"
	 '''

	 def compile(LessThan l) '''
	 "LessThan"
	 '''

	 def compile(UpperThan u) '''
	 "UpperThan"
	 '''

}
